/**
import React, {FunctionComponent, useCallback, useState} from 'react';
import ReactDOM from 'react-dom';
import cloudLoopLogo from './NEWCLLogo.png';
import {useDropzone} from 'react-dropzone';
import "./index.css";
import {Loop} from "./components/Loop";
import * as mmb from 'music-metadata-browser';
import {LoopData, LoopDataFields} from "./types";

function getAudioMetadata(metadata: mmb.IAudioMetadata): LoopDataFields {
    let loopDataFields: new LoopDataFields();
    if (metadata.format.numberOfChannels != null) {
        loopDataFields.channels = metadata.format.numberOfChannels;
    }
    if (metadata.format.sampleRate != null) {
        loopDataFields.sample_rate = metadata.format.sampleRate;
    }
    loopDataFields.samples = metadata.format.numberOfSamples;
    loopDataFields.duration = metadata.format.duration;
    loopDataFields.bit_depth = metadata.format.bitsPerSample;}

    return loopDataFields;
}

export const LoopUploader: FunctionComponent<any> = (props) => {
    const [ uploading, setUploading ] = useState(false);
    const [loopsToUpload, setLoopsToUpload ] = useState<LoopData[]>([])
    const onDrop = useCallback((acceptedFiles) => {
        acceptedFiles.forEach((file: Blob) => {
            var reader = new FileReader();
            reader.readAsArrayBuffer(file);
            reader.onload = function() {
                console.log("FileReader output: " + reader.result);
            }
            mmb.parseBlob(file).then( metadata => {
                let localData = new LocalLoopData();
                let loopDataFields: LoopDataFields;
                loopDataFields.channels = metadata.format.numberOfChannels;
                const channels =
                const sample_rate = metadata.format.sampleRate;
                const samples = metadata.format.numberOfSamples;
                const duration = metadata.format.duration;
                const bit_depth = metadata.format.bitsPerSample;

                localDat

                setLoopsToUpload()
            });
        })

    }, [])

    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({onDrop});

    const loopFiles = acceptedFiles.map(file => (
        <li key={file.path}>
            <div className="fileListItem">
                <img className="logo" src={cloudLoopLogo} />
                <p>
                    {file.name} <br />
                    File size: {bytesToMb(file.size)} mb <br />
                    Channels: {data['channels']} <br />
                    Sample Rate: {data['sampleRate']} <br />
                    Number of Samples: {data['numSamples']} <br />
                </p>
            </div>
        </li>
    ));

    return (
        <div className="files">
            <div {...getRootProps({className: 'dropzone'})}>
                <input {...getInputProps()} />
                <p className="dropZone">drop files or click to upload</p>
            </div>
            <h5>FILES</h5>
            <ul>{loopFiles}</ul>
        </div>
    );
}

function bytesToMb(bytes: number) {
    var mB = bytes / (1024*1024);
    return mB.toFixed(2);
}

ReactDOM.render(
    <React.StrictMode>
        <UploadLoop />
    </React.StrictMode>,
    document.getElementById('root')
);

*/